{"version":3,"sources":["webpack:///index.js","webpack:///./js/app.js","webpack:///./js/dashboardView.js","webpack:///./js/sensorListView.js","webpack:///./index.html","webpack:///external \"angular\"","webpack:///external {\"amd\":\"angular-route\"}","webpack:///./js/index.js","webpack:///./views/dashboard.html","webpack:///./views/sensor_list.html","webpack:///external \"Twilio.Sync\""],"names":["webpackJsonp","202","module","exports","__webpack_require__","SENSOR_DATA_MAP_NAME","sensorId","callbacks","randomString","len","charSet","i","randomPoz","Math","floor","random","length","substring","loadSensors","invalidSensors","configDocument","value","sensors","sensor","id","name","info","twilio_sim_sid","console","log","warn","push","sensorInfoCheck","callback","match","genToken","token","hash","crypto","createHash","update","digest","$","SyncClient","Client","syncClient","initialized","Deferred","updateToken","cb","that","this","get","result","success","setTimeout","bind","ttl","error","fail","jqXHR","textStatus","fetchConfiguration","document","then","doc","newDoc","extend","forEach","idOfInvalidSensor","set","addSensor","newSensor","created_at","Date","getTime","t","mutate","remoteData","Promise","all","map","controlMap","data","refresh","catch","err","updateSensor","updatedSensor","regenToken","deleteSensor","removeMap","init","resolve","203","dashboardView","templateUrl","app","$scope","noSensor","Object","keys","204","sensorListView","angular","copy","sensorAdded","text","JSON","stringify","editedSensorInfo","hide","fadeIn","$apply","editSensor","regenTokenForSensor","sensorUpdated","click","206","p","207","208","undefined","209","moment","currentView","$currentViewScope","App","window","controller","when","done","config","$routeProvider","otherwise","redirectTo","filter","datestr","format","292","path","run","c","put","293","318","Twilio","Sync"],"mappings":"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","file":"index.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 202:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst APP_CONFIGURATION_DOCUMENT_NAME = \"app.configuration\";\nfunction SENSOR_MEASUREMENTS_LIST_NAME(sensorId) { return \"sensors.\" + sensorId + \".measurements\"; }\nfunction SENSOR_DATA_MAP_NAME(sensorId) { return \"sensors.\" + sensorId + \".data\"; }\n\nmodule.exports = function(callbacks) {\n  const $ = __webpack_require__(4);\n  const crypto = __webpack_require__(43);\n  const SyncClient = __webpack_require__(318).Client;\n  var syncClient;\n  var token;\n  var auth = \"username=twilio&pincode=928462\";\n  var configDocument;\n\n  var sensors = {};\n\n  function randomString(len) {\n      var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var randomString = '';\n      for (var i = 0; i < len; i++) {\n          var randomPoz = Math.floor(Math.random() * charSet.length);\n          randomString += charSet.substring(randomPoz,randomPoz+1);\n      }\n      return randomString;\n  }\n\n  function loadSensors() {\n    var invalidSensors = [];\n\n    for (var sensorId in configDocument.value.sensors) {\n      var sensor = configDocument.value.sensors[sensorId];\n      if (sensor.id === sensorId &&\n          typeof (sensor.name) === \"string\" &&\n          typeof(sensor.twilio_sim_sid) === \"string\") {\n        if (sensorId in sensors) {\n          if (sensor.name !== sensors[sensorId].info.name ||\n              sensor.twilio_sim_sid !== sensors[sensorId].info.twilio_sim_sid) {\n            console.log(\"Updating sensor\", sensor);\n            sensors[sensorId].info = sensor;\n          }\n        } else {\n          console.log(\"Loading new sensor\", sensor);\n          sensors[sensorId] = { info: sensor };\n        }\n      } else {\n        console.warn(\"Invalid sensor configuration, removing from the list: \", sensorId, sensor);\n        invalidSensors.push(sensorId);\n      }\n    }\n    for (var sensorId in sensors) {\n      if (!(sensorId in configDocument.value.sensors)) {\n        console.log(\"Deleting sensor\", sensor);\n\n        // \n        // if (sensors[sensorId].snapshotDocument) {\n        //   sensors[sensorId].snapshotDocument.removeAllListeners('updated');\n        // }\n        //\n\n        delete sensors[sensorId];\n      }\n    }\n    return invalidSensors;\n  }\n\n  function sensorInfoCheck(sensor, callback) {\n    if (!sensor.id || !sensor.id.match(/^[a-zA-Z0-9]+$/))  { callback(\"sensor id is invalid: \" + sensor.id); return false; }\n    if (!sensor.name) { callback(\"sensor name is not specified\"); return false; }\n    if (!sensor.twilio_sim_sid || !sensor.twilio_sim_sid.match(/^DE[a-z0-9]{32}$/)) { callback(\"sensor sim SID is invalid: \" + sensor.twilio_sim_sid); return false; }\n    return true;\n  }\n\n  function genToken() {\n    var token = randomString(16);\n    var hash = crypto.createHash('sha512').update(token).digest(\"hex\");\n    return { token: token, hash: hash };\n  }\n\n  return {\n  initialized: $.Deferred(),\n\n  sensors: sensors,\n\n  updateToken: function (cb) {\n    var that = this;\n    return $.get(\"/userauthenticate?\" + auth, function (result) {\n      if (result.success) {\n        console.log(\"token updated:\", result);\n        token = result.token;\n        if (syncClient) {\n            syncClient.updateToken(token);\n        } else {\n            syncClient = new SyncClient(token);\n        }\n        if (cb) cb(token);\n        setTimeout(that.updateToken.bind(that), result.ttl*1000 * 0.96); // update token slightly in adance of ttl\n      } else {\n        console.error(\"failed to authenticate the user: \", result.error);\n      }\n    }).fail(function (jqXHR, textStatus, error) {\n      console.error(\"failed to send authentication request:\", textStatus, error);\n      setTimeout(that.updateToken.bind(that), 10000); // retry in 10 seconds\n    });\n  },\n\n  fetchConfiguration: function () {\n    return syncClient.document(APP_CONFIGURATION_DOCUMENT_NAME).then(function (doc) {\n      configDocument = doc;\n      var newDoc = null;\n      var invalidSensors;\n\n      if (doc.value.sensors) {\n        invalidSensors = loadSensors();\n        if (invalidSensors.length) {\n          if (null ===  newDoc) newDoc = $.extend(true, doc.value, {});\n          invalidSensors.forEach(function (idOfInvalidSensor) {\n            delete newDoc.sensors[idOfInvalidSensor];\n          });\n        }\n      } else {\n        console.warn(\"sensors is not configured, creating an empty list\");\n        if (null ===  newDoc) newDoc = $.extend(true, doc.value, {});\n        newDoc.sensors = {};\n      }\n      return newDoc;\n    }).then(function (newDoc) {\n      if (newDoc !== null) {\n        return configDocument.set(newDoc).then(function () {\n          console.log(\"app configuration updated with new value:\", newDoc);\n        });\n      }\n    });\n  },\n\n  addSensor: function (newSensor, callback) {\n    if (!sensorInfoCheck(newSensor, callback)) return;\n    if (newSensor.id in configDocument.value.sensors) return callback(\"Sensor with the same ID exists\");\n    newSensor.created_at = (new Date()).getTime();\n\n    var t = genToken();\n    newSensor.hash = t.hash;\n\n    configDocument.mutate(function (remoteData) {\n      if (!remoteData.sensors) remoteData.sensors = {};\n      remoteData.sensors[newSensor.id] = newSensor;\n      return remoteData;\n    }).then(function () {\n      // create necessary objects\n      return Promise.all([\n        syncClient.map(SENSOR_DATA_MAP_NAME(newSensor.id)).then(function (controlMap) {\n          return Promise.all[\n            controlMap.set('humidity', { data: -1 }),\n            controlMap.set('weight', { data: -1 }),\n            controlMap.set('temperature', { data: -1})\n          ];\n        })\n      ]);\n    }).then(function () {\n      loadSensors();\n      // make token temporarily visible\n      callback(null, $.extend(true, sensors[newSensor.id].info, { token: t.token }));\n      callbacks.refresh();\n    }).catch(function (err) {\n      callback(err);\n    });\n  },\n\n  updateSensor: function (updatedSensor, callback) {\n    configDocument.mutate(function (remoteData) {\n      if (updatedSensor.id in remoteData.sensors) {\n        remoteData.sensors[updatedSensor.id] = $.extend(true, updatedSensor, {\n            hash: remoteData.sensors[updatedSensor.id].hash\n          });\n      } else {\n        callback(\"Sensor is not in the list\");\n      }\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      callback(null);\n      callbacks.refresh();\n    }).catch(function (err) {\n      callback(err);\n    });\n  },\n\n  regenToken: function (sensorId, callback) {\n    var t = genToken();\n    configDocument.mutate(function (remoteData) {\n      if (sensorId in remoteData.sensors) {\n        remoteData.sensors[sensorId].hash = t.hash;\n      } else {\n        throw \"unknown sensor: \" + sensorId;\n      }\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      // make token temporarily visible\n      callback($.extend(true, sensors[sensorId].info, { token: t.token }));\n      callbacks.refresh();\n    }).catch(function (err) {\n      // ignore error\n      console.error(\"regenToken\", err);\n    });\n  },\n\n  deleteSensor: function (sensorId) {\n    configDocument.mutate(function (remoteData) {\n      delete remoteData.sensors[sensorId];\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      callbacks.refresh();\n    }).then(function () {\n      syncClient.map(SENSOR_DATA_MAP_NAME(sensorId)).then(function (map) { map.removeMap(); });\n    });\n  },\n\n  init: function () {\n    var that = this;\n    this.updateToken(function (token) {\n      that.fetchConfiguration().then(function () {\n        callbacks.refresh();\n      }).then(function () {\n        that.initialized.resolve();\n      });\n    });\n  }\n  };\n};\n\n\n/***/ }),\n\n/***/ 203:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dashboardView = {\n  templateUrl: __webpack_require__(292),\n\n  init: function (app, $scope) {\n    $scope.sensors = app.sensors;\n    $scope.noSensor = function () { return Object.keys(app.sensors).length === 0; }\n  }\n};\n\nmodule.exports = dashboardView;\n\n\n/***/ }),\n\n/***/ 204:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $ = __webpack_require__(4);\n\nvar sensorListView = {\n  templateUrl: __webpack_require__(293),\n\n  init: function (app, $scope) {\n    $scope.sensors = app.sensors;\n    $scope.newSensor = {};\n    $scope.addSensor = function () {\n      app.addSensor(angular.copy($scope.newSensor), function (err, sensorAdded) {\n        if (err) {\n          $('#add-sensor-failed').text(JSON.stringify(err));          \n        } else {\n          $scope.editedSensorInfo = sensorAdded;\n          $('.add-sensor').hide();\n          $('.add-sensor-show').fadeIn(333);          \n          $scope.$apply();\n        }\n      });\n    };\n    $scope.editSensor = function (sensorId) {\n      $scope.editedSensorInfo = app.sensors[sensorId].info;\n      $('.edit-sensor').fadeIn(333);\n    };\n    $scope.updateSensor = function () {\n      app.updateSensor(angular.copy($scope.editedSensorInfo), function (err) {\n        if (err) {\n          $('#edit-sensor-failed').text(JSON.stringify(err));          \n        } else {\n          $('.edit-sensor').hide();\n          $scope.$apply();\n        }\n      });\n    };\n    $scope.deleteSensor = function (sensorId) {\n      app.deleteSensor(sensorId);\n    };\n    $scope.regenTokenForSensor = function (sensorId) {\n      app.regenToken(sensorId, function (sensorUpdated) {\n        $scope.editedSensorInfo = sensorUpdated;\n      });\n    };\n\n    $('.add-sensor-show').click(function() {\n      $(this).hide();\n      $('.add-sensor').fadeIn(333);\n    });\n    $('.add-sensor-cancel').click(function() {\n      $('.add-sensor').hide();\n      $('.add-sensor-show').fadeIn(333);\n    });\n\n    $('.edit-sensor-cancel').click(function() {\n      $scope.editedSensorInfo = null;\n      $('.edit-sensor').hide();\n      $scope.$apply();\n    });\n  },\n};\n\nmodule.exports = sensorListView;\n\n\n/***/ }),\n\n/***/ 206:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"index.html\";\n\n/***/ }),\n\n/***/ 207:\n/***/ (function(module, exports) {\n\nmodule.exports = angular;\n\n/***/ }),\n\n/***/ 208:\n/***/ (function(module, exports) {\n\nmodule.exports = undefined;\n\n/***/ }),\n\n/***/ 209:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nconst $ = __webpack_require__(4);\nconst angular = __webpack_require__(207);\nconst moment = __webpack_require__(0);\n__webpack_require__(208);\n\nconst MOMENT_FORMAT = \"MMM DD YYYY @ hh:mm\";\n\n// style sheets\n__webpack_require__(30);\n__webpack_require__(31);\n\n// index.html\n__webpack_require__(206);\n\nconst dashboardView = __webpack_require__(203);\nconst sensorListView = __webpack_require__(204);\n\nvar currentView;\nvar $currentViewScope;\n\nvar App = __webpack_require__(202);\nwindow.app = new App({\n  refresh: function () {\n    $currentViewScope.$apply();\n  }\n});\n\nangular\n  .module(\"app\", [\n    'ngRoute'\n  ])\n  .controller('DashboardViewCtrl', ['$scope', function ($scope) {\n    $currentViewScope = $scope;\n    currentView = dashboardView;\n    $.when(app.initialized).done(function () {\n      dashboardView.init(app, $scope);\n    });\n  }])\n  .controller('SensorListViewCtrl', ['$scope', function ($scope) {\n    $currentViewScope = $scope;\n    currentView = sensorListView;\n    $.when(app.initialized).done(function () {\n      sensorListView.init(app, $scope);\n    });\n  }])\n  .config(['$routeProvider', function ($routeProvider) {\n    $routeProvider\n      .when('/dashboard', { controller: 'DashboardViewCtrl', templateUrl: dashboardView.templateUrl } )\n      .when('/sensors', { controller: 'SensorListViewCtrl', templateUrl: sensorListView.templateUrl } )\n      .otherwise({ redirectTo: '/dashboard' }); \n  }])\n  .filter('moment', function () {\n    return function (datestr) {\n      return moment(datestr).format(MOMENT_FORMAT);\n    };\n  }); \n\n\n/***/ }),\n\n/***/ 292:\n/***/ (function(module, exports) {\n\nvar path = 'views/dashboard.html';\nvar html = \"<h1>Active Industrial Sensors</h1>\\n\\n<p ng-show=\\\"noSensor()\\\">We aren't tracking any Industrial Sensors right now. Click the Add Industrial Sensor button to get started.</p>\\n\\n<div ng-repeat=\\\"sensor in sensors\\\" class=\\\"jumbotron sensor sensor{{ sensor.info.id }} chalk-background\\\">\\n  <h3>\\n    {{ sensor.info.name }}\\n  </h3>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-8 col-lg-offset-2 img-parent\\\">\\n      <div class=\\\"sensor-feed\\\">\\n\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row motion_stats\\\">\\n\\n  </div>\\n</div>\\n\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ }),\n\n/***/ 293:\n/***/ (function(module, exports) {\n\nvar path = 'views/sensor_list.html';\nvar html = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <div class=\\\"page-header\\\">\\n      <h1 id=\\\"tables\\\">Configuration</h1>\\n    </div>\\n\\n    <div class=\\\"bs-component\\\">\\n      <table class=\\\"table table-striped table-hover\\\">\\n        <thead>\\n          <tr>\\n            <th><strong>Id</strong></th>\\n            <th><strong>Name</strong></th>\\n            <th><strong>SIM Sid</strong></th>\\n            <th><strong>Token</strong></th>\\n            <th><strong>Created</strong></th>\\n            <th><strong>Actions</strong></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr ng-repeat=\\\"sensor in sensors\\\" class=\\\"chalk-background\\\" ng-class=\\\"{'text-success': editedSensorInfo.id === sensor.info.id}\\\">\\n            <td>{{ sensor.info.id }}</td>\\n            <td>{{ sensor.info.name }}</td>\\n            <td>{{ sensor.info.twilio_sim_sid }}</td>\\n            <td>\\n                <small ng-if=\\\"editedSensorInfo.id === sensor.info.id\\\" class=\\\"text-warning\\\">{{ editedSensorInfo.token }}</small>\\n                <button ng-click=\\\"regenTokenForSensor(sensor.info.id)\\\" ng-if=\\\"editedSensorInfo.id !== sensor.info.id\\\" class=\\\"btn btn-xs btn-success\\\">Regenerate</button>\\n            </td>\\n            <td>{{ sensor.info.created_at | moment }}</td>\\n            <td>\\n                <button ng-click=\\\"editSensor(sensor.info.id)\\\" class=\\\"btn btn-xs btn-success\\\">Edit</button>\\n                &nbsp;\\n                <button ng-click=\\\"deleteSensor(sensor.info.id)\\\" class=\\\"btn btn-xs btn-danger\\\">Delete</button>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    <div id=\\\"source-button\\\" class=\\\"btn btn-primary btn-xs\\\" style=\\\"display: none;\\\">&lt; &gt;</div></div><!-- /example -->\\n  </div>\\n</div>\\n\\n<button class=\\\"btn btn-primary add-sensor-show\\\">New Industrial Sensor</button>\\n\\n<div class=\\\"row add-sensor chalk-background\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <form class=\\\"form-horizontal\\\" ng-submit=\\\"addSensor()\\\">\\n      <fieldset>\\n        <h2>Add Industrial Sensor</h2>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"id\\\" class=\\\"col-lg-2\\\">Id</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.id\\\" id=\\\"id\\\" placeholder=\\\"\\\">\\n            <p>This can be any unique alphanumeric identifier.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\" class=\\\"col-lg-2\\\">Name</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.name\\\" id=\\\"name\\\" placeholder=\\\"\\\">\\n            <p>Give your Industrial Sensor a descriptive name for the dashboard.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"twilio_sim_sid\\\" class=\\\"col-lg-2\\\">Twilio SIM Sid</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.twilio_sim_sid\\\" id=\\\"twilio_sim_sid\\\" placeholder=\\\"\\\">\\n            <p>You can find your SIM Sid in Twilio's <a href=\\\"https://www.twilio.com/console/wireless/sims/\\\">Console</a>.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-lg-12\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n            <button type=\\\"reset\\\" class=\\\"btn btn-default add-sensor-cancel\\\">Cancel</button>\\n          </div>\\n        </div>\\n\\n        <p class=\\\"text-warning\\\" id=\\\"add-sensor-failed\\\"></p>\\n      </fieldset>\\n    </form>\\n  </div>\\n</div>\\n\\n<div class=\\\"row edit-sensor\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <form class=\\\"form-horizontal\\\" ng-submit=\\\"updateSensor()\\\">\\n      <fieldset>\\n        <legend>Update Industrial Sensor</legend>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"id\\\" class=\\\"col-lg-2\\\">Id</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.id\\\" id=\\\"id\\\" value=\\\"{{ editedSensorInfo.id }}\\\" placeholder=\\\"\\\" disabled>\\n            <p>This can be any unique alphanumeric identifier.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\" class=\\\"col-lg-2\\\">Name</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.name\\\" id=\\\"name\\\" value=\\\"{{ editedSensorInfo.name }}\\\" placeholder=\\\"\\\">\\n            <p>Give your Industrial Sensor a descriptive name for the dashboard.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"twilio_sim_sid\\\" class=\\\"col-lg-2\\\">Twilio SIM Sid</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.twilio_sim_sid\\\" id=\\\"twilio_sim_sid\\\" value=\\\"{{ editedSensorInfo.twilio_sim_sid }}\\\" placeholder=\\\"\\\">\\n            <p>You can find your SIM Sid in Twilio's <a href=\\\"https://www.twilio.com/console/wireless/sims/\\\">Console</a>.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-lg-10\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n            <button type=\\\"reset\\\" class=\\\"btn btn-default edit-sensor-cancel\\\">Cancel</button>\\n          </div>\\n        </div>\\n\\n        <p class=\\\"text-warning\\\" id=\\\"edit-sensor-failed\\\"></p>\\n      </fieldset>\\n    </form>\\n  </div>\\n</div>\\n\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ }),\n\n/***/ 318:\n/***/ (function(module, exports) {\n\nmodule.exports = Twilio.Sync;\n\n/***/ })\n\n},[209]);\n\n\n// WEBPACK FOOTER //\n// index.js","'use strict';\n\nconst APP_CONFIGURATION_DOCUMENT_NAME = \"app.configuration\";\nfunction SENSOR_MEASUREMENTS_LIST_NAME(sensorId) { return \"sensors.\" + sensorId + \".measurements\"; }\nfunction SENSOR_DATA_MAP_NAME(sensorId) { return \"sensors.\" + sensorId + \".data\"; }\n\nmodule.exports = function(callbacks) {\n  const $ = require(\"jquery\");\n  const crypto = require(\"crypto\");\n  const SyncClient = require(\"twilio-sync\").Client;\n  var syncClient;\n  var token;\n  var auth = \"username=twilio&pincode=928462\";\n  var configDocument;\n\n  var sensors = {};\n\n  function randomString(len) {\n      var charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var randomString = '';\n      for (var i = 0; i < len; i++) {\n          var randomPoz = Math.floor(Math.random() * charSet.length);\n          randomString += charSet.substring(randomPoz,randomPoz+1);\n      }\n      return randomString;\n  }\n\n  function loadSensors() {\n    var invalidSensors = [];\n\n    for (var sensorId in configDocument.value.sensors) {\n      var sensor = configDocument.value.sensors[sensorId];\n      if (sensor.id === sensorId &&\n          typeof (sensor.name) === \"string\" &&\n          typeof(sensor.twilio_sim_sid) === \"string\") {\n        if (sensorId in sensors) {\n          if (sensor.name !== sensors[sensorId].info.name ||\n              sensor.twilio_sim_sid !== sensors[sensorId].info.twilio_sim_sid) {\n            console.log(\"Updating sensor\", sensor);\n            sensors[sensorId].info = sensor;\n          }\n        } else {\n          console.log(\"Loading new sensor\", sensor);\n          sensors[sensorId] = { info: sensor };\n        }\n      } else {\n        console.warn(\"Invalid sensor configuration, removing from the list: \", sensorId, sensor);\n        invalidSensors.push(sensorId);\n      }\n    }\n    for (var sensorId in sensors) {\n      if (!(sensorId in configDocument.value.sensors)) {\n        console.log(\"Deleting sensor\", sensor);\n\n        // \n        // if (sensors[sensorId].snapshotDocument) {\n        //   sensors[sensorId].snapshotDocument.removeAllListeners('updated');\n        // }\n        //\n\n        delete sensors[sensorId];\n      }\n    }\n    return invalidSensors;\n  }\n\n  function sensorInfoCheck(sensor, callback) {\n    if (!sensor.id || !sensor.id.match(/^[a-zA-Z0-9]+$/))  { callback(\"sensor id is invalid: \" + sensor.id); return false; }\n    if (!sensor.name) { callback(\"sensor name is not specified\"); return false; }\n    if (!sensor.twilio_sim_sid || !sensor.twilio_sim_sid.match(/^DE[a-z0-9]{32}$/)) { callback(\"sensor sim SID is invalid: \" + sensor.twilio_sim_sid); return false; }\n    return true;\n  }\n\n  function genToken() {\n    var token = randomString(16);\n    var hash = crypto.createHash('sha512').update(token).digest(\"hex\");\n    return { token: token, hash: hash };\n  }\n\n  return {\n  initialized: $.Deferred(),\n\n  sensors: sensors,\n\n  updateToken: function (cb) {\n    var that = this;\n    return $.get(\"/userauthenticate?\" + auth, function (result) {\n      if (result.success) {\n        console.log(\"token updated:\", result);\n        token = result.token;\n        if (syncClient) {\n            syncClient.updateToken(token);\n        } else {\n            syncClient = new SyncClient(token);\n        }\n        if (cb) cb(token);\n        setTimeout(that.updateToken.bind(that), result.ttl*1000 * 0.96); // update token slightly in adance of ttl\n      } else {\n        console.error(\"failed to authenticate the user: \", result.error);\n      }\n    }).fail(function (jqXHR, textStatus, error) {\n      console.error(\"failed to send authentication request:\", textStatus, error);\n      setTimeout(that.updateToken.bind(that), 10000); // retry in 10 seconds\n    });\n  },\n\n  fetchConfiguration: function () {\n    return syncClient.document(APP_CONFIGURATION_DOCUMENT_NAME).then(function (doc) {\n      configDocument = doc;\n      var newDoc = null;\n      var invalidSensors;\n\n      if (doc.value.sensors) {\n        invalidSensors = loadSensors();\n        if (invalidSensors.length) {\n          if (null ===  newDoc) newDoc = $.extend(true, doc.value, {});\n          invalidSensors.forEach(function (idOfInvalidSensor) {\n            delete newDoc.sensors[idOfInvalidSensor];\n          });\n        }\n      } else {\n        console.warn(\"sensors is not configured, creating an empty list\");\n        if (null ===  newDoc) newDoc = $.extend(true, doc.value, {});\n        newDoc.sensors = {};\n      }\n      return newDoc;\n    }).then(function (newDoc) {\n      if (newDoc !== null) {\n        return configDocument.set(newDoc).then(function () {\n          console.log(\"app configuration updated with new value:\", newDoc);\n        });\n      }\n    });\n  },\n\n  addSensor: function (newSensor, callback) {\n    if (!sensorInfoCheck(newSensor, callback)) return;\n    if (newSensor.id in configDocument.value.sensors) return callback(\"Sensor with the same ID exists\");\n    newSensor.created_at = (new Date()).getTime();\n\n    var t = genToken();\n    newSensor.hash = t.hash;\n\n    configDocument.mutate(function (remoteData) {\n      if (!remoteData.sensors) remoteData.sensors = {};\n      remoteData.sensors[newSensor.id] = newSensor;\n      return remoteData;\n    }).then(function () {\n      // create necessary objects\n      return Promise.all([\n        syncClient.map(SENSOR_DATA_MAP_NAME(newSensor.id)).then(function (controlMap) {\n          return Promise.all[\n            controlMap.set('humidity', { data: -1 }),\n            controlMap.set('weight', { data: -1 }),\n            controlMap.set('temperature', { data: -1})\n          ];\n        })\n      ]);\n    }).then(function () {\n      loadSensors();\n      // make token temporarily visible\n      callback(null, $.extend(true, sensors[newSensor.id].info, { token: t.token }));\n      callbacks.refresh();\n    }).catch(function (err) {\n      callback(err);\n    });\n  },\n\n  updateSensor: function (updatedSensor, callback) {\n    configDocument.mutate(function (remoteData) {\n      if (updatedSensor.id in remoteData.sensors) {\n        remoteData.sensors[updatedSensor.id] = $.extend(true, updatedSensor, {\n            hash: remoteData.sensors[updatedSensor.id].hash\n          });\n      } else {\n        callback(\"Sensor is not in the list\");\n      }\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      callback(null);\n      callbacks.refresh();\n    }).catch(function (err) {\n      callback(err);\n    });\n  },\n\n  regenToken: function (sensorId, callback) {\n    var t = genToken();\n    configDocument.mutate(function (remoteData) {\n      if (sensorId in remoteData.sensors) {\n        remoteData.sensors[sensorId].hash = t.hash;\n      } else {\n        throw \"unknown sensor: \" + sensorId;\n      }\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      // make token temporarily visible\n      callback($.extend(true, sensors[sensorId].info, { token: t.token }));\n      callbacks.refresh();\n    }).catch(function (err) {\n      // ignore error\n      console.error(\"regenToken\", err);\n    });\n  },\n\n  deleteSensor: function (sensorId) {\n    configDocument.mutate(function (remoteData) {\n      delete remoteData.sensors[sensorId];\n      return remoteData;\n    }).then(function () {\n      loadSensors();\n      callbacks.refresh();\n    }).then(function () {\n      syncClient.map(SENSOR_DATA_MAP_NAME(sensorId)).then(function (map) { map.removeMap(); });\n    });\n  },\n\n  init: function () {\n    var that = this;\n    this.updateToken(function (token) {\n      that.fetchConfiguration().then(function () {\n        callbacks.refresh();\n      }).then(function () {\n        that.initialized.resolve();\n      });\n    });\n  }\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/app.js\n// module id = 202\n// module chunks = 0","var dashboardView = {\n  templateUrl: require(\"../views/dashboard.html\"),\n\n  init: function (app, $scope) {\n    $scope.sensors = app.sensors;\n    $scope.noSensor = function () { return Object.keys(app.sensors).length === 0; }\n  }\n};\n\nmodule.exports = dashboardView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/dashboardView.js\n// module id = 203\n// module chunks = 0","var $ = require(\"jquery\");\n\nvar sensorListView = {\n  templateUrl: require(\"../views/sensor_list.html\"),\n\n  init: function (app, $scope) {\n    $scope.sensors = app.sensors;\n    $scope.newSensor = {};\n    $scope.addSensor = function () {\n      app.addSensor(angular.copy($scope.newSensor), function (err, sensorAdded) {\n        if (err) {\n          $('#add-sensor-failed').text(JSON.stringify(err));          \n        } else {\n          $scope.editedSensorInfo = sensorAdded;\n          $('.add-sensor').hide();\n          $('.add-sensor-show').fadeIn(333);          \n          $scope.$apply();\n        }\n      });\n    };\n    $scope.editSensor = function (sensorId) {\n      $scope.editedSensorInfo = app.sensors[sensorId].info;\n      $('.edit-sensor').fadeIn(333);\n    };\n    $scope.updateSensor = function () {\n      app.updateSensor(angular.copy($scope.editedSensorInfo), function (err) {\n        if (err) {\n          $('#edit-sensor-failed').text(JSON.stringify(err));          \n        } else {\n          $('.edit-sensor').hide();\n          $scope.$apply();\n        }\n      });\n    };\n    $scope.deleteSensor = function (sensorId) {\n      app.deleteSensor(sensorId);\n    };\n    $scope.regenTokenForSensor = function (sensorId) {\n      app.regenToken(sensorId, function (sensorUpdated) {\n        $scope.editedSensorInfo = sensorUpdated;\n      });\n    };\n\n    $('.add-sensor-show').click(function() {\n      $(this).hide();\n      $('.add-sensor').fadeIn(333);\n    });\n    $('.add-sensor-cancel').click(function() {\n      $('.add-sensor').hide();\n      $('.add-sensor-show').fadeIn(333);\n    });\n\n    $('.edit-sensor-cancel').click(function() {\n      $scope.editedSensorInfo = null;\n      $('.edit-sensor').hide();\n      $scope.$apply();\n    });\n  },\n};\n\nmodule.exports = sensorListView;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/sensorListView.js\n// module id = 204\n// module chunks = 0","module.exports = __webpack_public_path__ + \"index.html\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.html\n// module id = 206\n// module chunks = 0","module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 207\n// module chunks = 0","module.exports = undefined;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"amd\":\"angular-route\"}\n// module id = 208\n// module chunks = 0","'use strict';\n\nconst $ = require(\"jquery\");\nconst angular = require(\"angular\");\nconst moment = require(\"moment\");\nrequire(\"angular-route\");\n\nconst MOMENT_FORMAT = \"MMM DD YYYY @ hh:mm\";\n\n// style sheets\nrequire(\"bootstrap-webpack\");\nrequire(\"../scss/main.scss\");\n\n// index.html\nrequire(\"../index.html\");\n\nconst dashboardView = require(\"./dashboardView\");\nconst sensorListView = require(\"./sensorListView\");\n\nvar currentView;\nvar $currentViewScope;\n\nvar App = require(\"./app\");\nwindow.app = new App({\n  refresh: function () {\n    $currentViewScope.$apply();\n  }\n});\n\nangular\n  .module(\"app\", [\n    'ngRoute'\n  ])\n  .controller('DashboardViewCtrl', ['$scope', function ($scope) {\n    $currentViewScope = $scope;\n    currentView = dashboardView;\n    $.when(app.initialized).done(function () {\n      dashboardView.init(app, $scope);\n    });\n  }])\n  .controller('SensorListViewCtrl', ['$scope', function ($scope) {\n    $currentViewScope = $scope;\n    currentView = sensorListView;\n    $.when(app.initialized).done(function () {\n      sensorListView.init(app, $scope);\n    });\n  }])\n  .config(['$routeProvider', function ($routeProvider) {\n    $routeProvider\n      .when('/dashboard', { controller: 'DashboardViewCtrl', templateUrl: dashboardView.templateUrl } )\n      .when('/sensors', { controller: 'SensorListViewCtrl', templateUrl: sensorListView.templateUrl } )\n      .otherwise({ redirectTo: '/dashboard' }); \n  }])\n  .filter('moment', function () {\n    return function (datestr) {\n      return moment(datestr).format(MOMENT_FORMAT);\n    };\n  }); \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./js/index.js\n// module id = 209\n// module chunks = 0","var path = 'views/dashboard.html';\nvar html = \"<h1>Active Industrial Sensors</h1>\\n\\n<p ng-show=\\\"noSensor()\\\">We aren't tracking any Industrial Sensors right now. Click the Add Industrial Sensor button to get started.</p>\\n\\n<div ng-repeat=\\\"sensor in sensors\\\" class=\\\"jumbotron sensor sensor{{ sensor.info.id }} chalk-background\\\">\\n  <h3>\\n    {{ sensor.info.name }}\\n  </h3>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-8 col-lg-offset-2 img-parent\\\">\\n      <div class=\\\"sensor-feed\\\">\\n\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row motion_stats\\\">\\n\\n  </div>\\n</div>\\n\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/dashboard.html\n// module id = 292\n// module chunks = 0","var path = 'views/sensor_list.html';\nvar html = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <div class=\\\"page-header\\\">\\n      <h1 id=\\\"tables\\\">Configuration</h1>\\n    </div>\\n\\n    <div class=\\\"bs-component\\\">\\n      <table class=\\\"table table-striped table-hover\\\">\\n        <thead>\\n          <tr>\\n            <th><strong>Id</strong></th>\\n            <th><strong>Name</strong></th>\\n            <th><strong>SIM Sid</strong></th>\\n            <th><strong>Token</strong></th>\\n            <th><strong>Created</strong></th>\\n            <th><strong>Actions</strong></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr ng-repeat=\\\"sensor in sensors\\\" class=\\\"chalk-background\\\" ng-class=\\\"{'text-success': editedSensorInfo.id === sensor.info.id}\\\">\\n            <td>{{ sensor.info.id }}</td>\\n            <td>{{ sensor.info.name }}</td>\\n            <td>{{ sensor.info.twilio_sim_sid }}</td>\\n            <td>\\n                <small ng-if=\\\"editedSensorInfo.id === sensor.info.id\\\" class=\\\"text-warning\\\">{{ editedSensorInfo.token }}</small>\\n                <button ng-click=\\\"regenTokenForSensor(sensor.info.id)\\\" ng-if=\\\"editedSensorInfo.id !== sensor.info.id\\\" class=\\\"btn btn-xs btn-success\\\">Regenerate</button>\\n            </td>\\n            <td>{{ sensor.info.created_at | moment }}</td>\\n            <td>\\n                <button ng-click=\\\"editSensor(sensor.info.id)\\\" class=\\\"btn btn-xs btn-success\\\">Edit</button>\\n                &nbsp;\\n                <button ng-click=\\\"deleteSensor(sensor.info.id)\\\" class=\\\"btn btn-xs btn-danger\\\">Delete</button>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    <div id=\\\"source-button\\\" class=\\\"btn btn-primary btn-xs\\\" style=\\\"display: none;\\\">&lt; &gt;</div></div><!-- /example -->\\n  </div>\\n</div>\\n\\n<button class=\\\"btn btn-primary add-sensor-show\\\">New Industrial Sensor</button>\\n\\n<div class=\\\"row add-sensor chalk-background\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <form class=\\\"form-horizontal\\\" ng-submit=\\\"addSensor()\\\">\\n      <fieldset>\\n        <h2>Add Industrial Sensor</h2>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"id\\\" class=\\\"col-lg-2\\\">Id</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.id\\\" id=\\\"id\\\" placeholder=\\\"\\\">\\n            <p>This can be any unique alphanumeric identifier.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\" class=\\\"col-lg-2\\\">Name</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.name\\\" id=\\\"name\\\" placeholder=\\\"\\\">\\n            <p>Give your Industrial Sensor a descriptive name for the dashboard.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"twilio_sim_sid\\\" class=\\\"col-lg-2\\\">Twilio SIM Sid</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"newSensor.twilio_sim_sid\\\" id=\\\"twilio_sim_sid\\\" placeholder=\\\"\\\">\\n            <p>You can find your SIM Sid in Twilio's <a href=\\\"https://www.twilio.com/console/wireless/sims/\\\">Console</a>.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-lg-12\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n            <button type=\\\"reset\\\" class=\\\"btn btn-default add-sensor-cancel\\\">Cancel</button>\\n          </div>\\n        </div>\\n\\n        <p class=\\\"text-warning\\\" id=\\\"add-sensor-failed\\\"></p>\\n      </fieldset>\\n    </form>\\n  </div>\\n</div>\\n\\n<div class=\\\"row edit-sensor\\\">\\n  <div class=\\\"col-lg-12\\\">\\n    <form class=\\\"form-horizontal\\\" ng-submit=\\\"updateSensor()\\\">\\n      <fieldset>\\n        <legend>Update Industrial Sensor</legend>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"id\\\" class=\\\"col-lg-2\\\">Id</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.id\\\" id=\\\"id\\\" value=\\\"{{ editedSensorInfo.id }}\\\" placeholder=\\\"\\\" disabled>\\n            <p>This can be any unique alphanumeric identifier.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"name\\\" class=\\\"col-lg-2\\\">Name</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.name\\\" id=\\\"name\\\" value=\\\"{{ editedSensorInfo.name }}\\\" placeholder=\\\"\\\">\\n            <p>Give your Industrial Sensor a descriptive name for the dashboard.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"twilio_sim_sid\\\" class=\\\"col-lg-2\\\">Twilio SIM Sid</label>\\n          <div class=\\\"col-lg-12\\\">\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"editedSensorInfo.twilio_sim_sid\\\" id=\\\"twilio_sim_sid\\\" value=\\\"{{ editedSensorInfo.twilio_sim_sid }}\\\" placeholder=\\\"\\\">\\n            <p>You can find your SIM Sid in Twilio's <a href=\\\"https://www.twilio.com/console/wireless/sims/\\\">Console</a>.</p>\\n          </div>\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"col-lg-10\\\">\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n            <button type=\\\"reset\\\" class=\\\"btn btn-default edit-sensor-cancel\\\">Cancel</button>\\n          </div>\\n        </div>\\n\\n        <p class=\\\"text-warning\\\" id=\\\"edit-sensor-failed\\\"></p>\\n      </fieldset>\\n    </form>\\n  </div>\\n</div>\\n\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./views/sensor_list.html\n// module id = 293\n// module chunks = 0","module.exports = Twilio.Sync;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"Twilio.Sync\"\n// module id = 318\n// module chunks = 0"],"sourceRoot":""}